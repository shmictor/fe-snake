(= for (fn (i n f)
  (while (<= i n)
    (f i)
    (= i (+ i 1)))))

(= at (fn (i lst)
  (while (< 1 i)
    (= lst (cdr lst))
    (= i (- i 1)))
  (car lst)))

(= load (fn ()
  (= fruit (cons (random 2 14) (random 2 14)))

  (= snake (list (cons 1 1)))
  (= length 1)
  (= grow (fn (snake)
    (let last snake)
    (while (cdr last)
      (= last (cdr last)))
    (let pos (car last))
    (setcdr last (list (cons (car pos) (cdr pos))))
    (= length (+ length 1))
    snake))

  (= next-dir (cons 1 0))
  (= dir next-dir)
  (= dirs (list (cons "right" (cons 1 0))
                (cons "left" (cons -1 0))
                (cons "up" (cons 0 1))
                (cons "down" (cons 0 -1))))

  (= game-over nil)))

(= input (fn (key)
  (for 1 4 (fn (i)
    (let v (at i dirs))
    (if (is (car v) key)
        (do
          (let d (cdr v))
          (if (not (is (+ (car d) (car dir)) 0)
                   (is (+ (car d) (car dir)) 0))
              (= next-dir d))))))

  (if (and game-over (is key "space"))
      (load))))

(= tick (fn ()
  (if (not game-over)
      (do
        (if (<= 1 length)
            (for 2 length (fn (i)
              (= i (+ (- length i) 2))
              (let pos (at i snake))
              (let new-pos (at (- i 1) snake))
              (setcar pos (car new-pos))
              (setcdr pos (cdr new-pos)))))

        (let head (car snake))
        (= dir next-dir)
        (setcar head (+ (car head) (car dir)))
        (setcdr head (+ (cdr head) (cdr dir)))
        (if (or (is (car head) 0) (is (car head) 15)
                (is (cdr head) 0) (is (cdr head) 15))
            (= game-over t))
        (for 2 length (fn (i)
          (let pos (at i snake))
          (if (and (is (car head) (car pos))
                   (is (cdr head) (cdr pos)))
              (= game-over t))))
        (if (and (is (car head) (car fruit))
                (is (cdr head) (cdr fruit)))
            (do
              (grow snake)
              (if (< length (* 14 14))
                  (do
                    (let new-fruit nil)
                    (while (not new-fruit)
                      (= new-fruit (cons (random 1 14) (random 1 14)))
                      (for 1 length (fn (i)
                        (let pos (at i snake))
                        (if (and (is (car new-fruit) (car pos))
                                (is (cdr new-fruit) (cdr pos)))
                            (= new-fruit nil)))))
                    (= fruit new-fruit))
                  (= game-over t))))))))

(= draw (fn ()
  (color 0.4 0.4 0.4)
  (for 1 14 (fn (x)
    (for 1 14 (fn (y)
      (circle x y 0.1)))))

  (color 1 0.6 0.7)
  (circle (car fruit) (cdr fruit) 0.8)

  (color 0.7 1 0.6)
  (for 1 length (fn (i)
    (let v (at i snake))
    (square (car v) (cdr v) 1)))))